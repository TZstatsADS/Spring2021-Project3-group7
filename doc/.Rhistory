if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
library(e1071)
library(xgboost)
library(randomForest)
set.seed(2020)
# setwd("~/Project3-FacialEmotionRecognition/doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
test_dir <- "../data/test_set_predict/" # This will be modified for different data sets.
test_image_dir <- paste(test_dir, "images/", sep="")
test_pt_dir <- paste(test_dir,  "points/", sep="")
test_label_path <- paste(test_dir, "label_prediction.csv", sep="")
run.cv.baseline <- FALSE # run cross-validation on the gbm baseline
sample.reweight <- TRUE # run sample reweighting in model training
K <- 5  # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test <- TRUE # run evaluation on an independent test set
run.feature.test <- TRUE # process features for test set
run.cv.xgboost <- FALSE
#gbm parameters tuning:
n.trees = c(10,50,100,200)
shrinkage = c(0.01,0.05,0.1,0.15)
#xgboost parameters tuning
n_iterations <- 100
set.seed(2020)
#train-test split
info <- read.csv(test_label_path)
n <- nrow(info)
#train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- seq(1, n, by=1)
n_files <- length(list.files(test_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(test_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(test_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list_test.RData")
source("../lib/feature.R")
#tm_feature_train <- NA
#if(run.feature.train){
#  tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
#  save(dat_train, file="../output/feature_train.RData")
#}else{
#load(file="../output/feature_train.RData")
#}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
#source("../lib/train_gbm.R")
source("../lib/test_gbm.R")
#source("../lib/fit_train_xgboost.R")
load("../output/res_cv_gbm.RData")
best_n.trees = as.numeric(res_cv_gbm[which.min(res_cv_gbm$mean_error),1])
best_shrinkage = as.numeric(res_cv_gbm[which.min(res_cv_gbm$mean_error),2])
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response')})
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!requre("gbm")){
install.packages("gbm")
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("gbm")){
install.packages("gbm")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
library(e1071)
library(xgboost)
library(randomForest)
library(gbm)
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response')})
}
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  0;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class')
```{r test xgboost}
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  2;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
which(label_pred_baseline != label_pred_xgb)
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response');
prob_pred_baseline[prob_pred_baseline  == 2 ] <- 0})
}
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  0;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  2;
label_pred_xgb[label_pred_xgb == 2] <-  0;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
which(label_pred_baseline != label_pred_xgb)
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  2;
label_pred_xgb[label_pred_xgb == 2] <-  0;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
which(label_pred_baseline != label_pred_xgb)
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response');
prob_pred_baseline[prob_pred_baseline  == 2 ] <- 0})
}
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
label_pred_baseline[label_pred_baseline == 2] <- 0;
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response')})
}
> which(label_pred_baseline != label_pred_xgb)
which(label_pred_baseline != label_pred_xgb)
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("gbm")){
install.packages("gbm")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
library(e1071)
library(xgboost)
library(randomForest)
library(gbm)
set.seed(2020)
# setwd("~/Project3-FacialEmotionRecognition/doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
test_dir <- "../data/test_set_predict/" # This will be modified for different data sets.
test_image_dir <- paste(test_dir, "images/", sep="")
test_pt_dir <- paste(test_dir,  "points/", sep="")
test_label_path <- paste(test_dir, "label_prediction.csv", sep="")
run.cv.baseline <- FALSE # run cross-validation on the gbm baseline
sample.reweight <- TRUE # run sample reweighting in model training
K <- 5  # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test <- TRUE # run evaluation on an independent test set
run.feature.test <- TRUE # process features for test set
run.cv.xgboost <- FALSE
#gbm parameters tuning:
n.trees = c(10,50,100,200)
shrinkage = c(0.01,0.05,0.1,0.15)
#xgboost parameters tuning
n_iterations <- 100
set.seed(2020)
#train-test split
info <- read.csv(test_label_path)
n <- nrow(info)
#train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- seq(1, n, by=1)
n_files <- length(list.files(test_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(test_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(test_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list_test.RData")
source("../lib/feature.R")
#tm_feature_train <- NA
#if(run.feature.train){
#  tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
#  save(dat_train, file="../output/feature_train.RData")
#}else{
#load(file="../output/feature_train.RData")
#}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
#source("../lib/train_gbm.R")
source("../lib/test_gbm.R")
#source("../lib/fit_train_xgboost.R")
load("../output/res_cv_gbm.RData")
best_n.trees = as.numeric(res_cv_gbm[which.min(res_cv_gbm$mean_error),1])
best_shrinkage = as.numeric(res_cv_gbm[which.min(res_cv_gbm$mean_error),2])
source("../lib/test_gbm.R")
tm_test_baseline = NA
feature_test <- as.matrix(dat_test[, -6006])
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test_baseline <- system.time({
label_pred_baseline <- as.integer(test_gbm(fit_train_baseline,feature_test, best_n.trees, best_shrinkage, pred.type = 'link'));
label_pred_baseline[label_pred_baseline == 2] <- 0;
prob_pred_baseline <- test_gbm(fit_train_baseline, feature_test,best_n.trees, best_shrinkage, pred.type = 'response')})
}
predict_baseline <- as.data.frame(label_pred_baseline)
#write.csv(baseline, "label.csv", row.names = F)
tm_test_xgb = NA
feature_test <- as.matrix(dat_test[, -6006])
colnames(feature_test) <- NULL
if(run.test){
load(file="../output/fit_train_xgb.RData")
tm_test_xgb <- system.time({label_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'class');
label_pred_xgb[label_pred_xgb >= 0.5] <- 1;
label_pred_xgb[label_pred_xgb < 0.5] <-  0;
prob_pred_xgb <- predict(fit_train_xgb, feature_test, pred.type = 'response')})
}
predict_xgb <- as.data.frame(label_pred_xgb)
output_csv <- cbind(predict_baseline, predict_xgb)
output_csv <- cbind(predict_baseline, predict_xgb)
names(output_csv) <- c("baseline model", "xgboost (improbed) model")
output_csv <- cbind(predict_baseline, predict_xgb)
names(output_csv) <- c("baseline model", "xgboost (improved) model")
output_csv <- cbind(predict_baseline, predict_xgb)
names(output_csv) <- c("baseline model", "xgboost (improved) model")
write.csv(output_csv, "test_prediction.csv", row.names = F)
